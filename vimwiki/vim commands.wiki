= Vim commands =

== Format ==

Format lines

`gq<motion>`

== Use the word under the cursor ==

To insert the word under the cursor in a command, you can use `<C-R><C-A>`.
Useful for search and replace especially.

`:%s/<C-R><C-A>/replacement/g`
`:Rg <C-R><C-A>`

== Terminal ==

== Yank ==

`:%y+` yank the whole file to the default register
`:%y"r` yank the whole file to the r-register

== FZF ==

`:W` open window selector

[More FZF commands](https://github.com/junegunn/fzf.vim)

=== Find ===

`Ctrl+f` find files
`Ctrl+o` open file in tab
`Ctrl+x` open file in split
`Ctrl+v` open file in vertical split

== command history ==

`q:` Opens the command history buffer.

== external commands ==

`:!ls` to run ls
`:r!ls` to read output into vim

== markdown ==

`:Toc` to display table of contents

== sessions ==

`:mksession .vim-session` to save current session to a file
`:source .vim-session` to load the saved session
`vim -S .vim-session` launch vim with a saved session

== Rg ==

`:Rg`

== go to definition ==

`gd` will take you to the local declaration.
`gD` will take you to the global declaration.
`g*` search for the word under the cursor (like *, but g* on 'rain' will find words like 'rainbow').
`g#` same as `g*` but in backward direction.
`gg` goes to the first line in the buffer (or provide a count before the command for a specific line).
`G` goes to the last line (or provide a count before the command for a specific line).
`g]` jump to a tag definition

== go to file ==

`gf`

== vim-fugitive ==

`:Gmerge`
`:Gdiff`

== quickfixes ==

`:vimgrep`

open quickfixes pane
`:copen`

search & replace for all quickfixes entries
`cdo %s/<search term>/<replace term>/cg`

== jumping ==

Press Ctrl-O to jump back to the previous (older) location.
Press Ctrl-I (same as Tab) to jump forward to the next (newer) location.
Display the jump list for the current window with:
`:jumps`

== find under cursor ==

Press `*` to find the word under the cursor


== surround ==

`cst<h3` change a tag under cursor to <h3>

`ysiw"` surround a word with quotes

`ysiw(` surround a word with braces padded with spaces

`ysiw)` surround a word with braces

`dst` delete surrounding tag under cursor

`da<` delete tag under cursor

== tabular ==

`:Tab /=`
before:
one = 1
two = 2
three = 3
four = 4

after
one   = 1
two   = 2
three = 3
four  = 4

Also works nicely with puppet hashrockets

`:Tab /=>`

== insert mode shortcuts ==

`Ctrl+w` to delete the last word typed
`Ctrl+u` to delete everything typed in the current insert mode session
`Ctrl+c` to stop inserting

== delete until search ==

`d/mystring`
if search pattern is already defined
`dn`

== splits ==

`Ctrl+w R` Swap top/bottom or left/right split

`Ctrl+w T` Break out current window into a new tabview

`Ctrl+w o` Close every window in the current tabview but the current one

== indent whole document ==

`gg=G`

== indent line ==

`==`

== align puppet rockets ==

`'<,'>call puppet#align#AlignHashrockets()`

== motions ==

t = to, goes up to the character specified
f = find, goes on top of the character specified
:h word-motions

== paste toggle ==

`:set paste`
`:set nopaste`
http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste

== editing remote files ==

http://vim.wikia.com/wiki/Editing_remote_files_via_scp_in_vim

== jump to matching brace ==

`%`

== using vim tab pages ==

http://vim.wikia.com/wiki/Using_tab_pages

== commentary.vim ==

comment out line
`gcc`

comment out paragraph
`gcap`

== yank stack ==

Allows you to cycle through yanked text so you can yank multiple things on to the stack instead of only one.

`Alt+p` cycle backward
`Alt+Shift+p` cycle forward

== join lines ==

`J`
`gJ`
