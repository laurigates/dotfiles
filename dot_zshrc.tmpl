# http://blog.askesis.pl/post/2017/04/how-to-debug-zsh-startup-time.html
# uncomment this and zprof at the end of this file to profile zsh startup
# zmodload zsh/zprof

#emulate sh -c '. /etc/profile'

# set terminal preference for i3
export TERMINAL=kitty

{{ if eq .chezmoi.os "darwin" }}
	export BROWSER="open -a Google\ Chrome"
{{ else if eq .chezmoi.os "linux" }}
	export BROWSER=google-chrome-stable
{{ end }}

# Use fd by default, fallback to find
export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude '.git' || find . -type f"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

# Preview files with bat and directories with tree
export FZF_PREVIEW_COMMAND="bat --style=numbers,changes --wrap never --color always {} || cat {} || tree -C {}"
export FZF_CTRL_T_OPTS="--min-height 30 --preview-window down:60% --preview-window noborder --preview '($FZF_PREVIEW_COMMAND) 2> /dev/null'"

# Preview directory tree when using Alt+C
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# Add the ability to copy reverse history search selection to the
# clipboard.
# Use xsel on Linux and pbcopy on macos.
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap \
  --bind '?:toggle-preview' \
  --bind 'ctrl-y:execute-silent(echo -n {2..} \
  | (xsel -ib || pbcopy))+abort' \
  --color header:italic \
  --header 'Press CTRL-Y to copy command into clipboard'"

# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  # print -lr -- "$1"/**(om)
	fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  # print -lr -- "$1"/**(omT/)
	fd --type d --hidden --follow --exclude ".git" . "$1"
}

# for existing man pages
function fzf_apropos() {
	apropos . | fzf --preview-window=up:50% --preview 'echo {} | cut -f 1 -d "(" | xargs man'
	# apropos '' | fzf --preview-window=up:50% --preview 'echo {} | cut -f 1 -d " " | xargs man' | cut -f 1 -d " "
}

# Fix SDL full screen output to correct monitor
export SDL_VIDEO_FULLSCREEN_HEAD=0
# export DOCKER_DEFAULT_PLATFORM=linux/amd64

export MAKEFLAGS="-j{{ .cpu.threads }}"
export BAT_THEME=TwoDark

export OLLAMA_ORIGINS="app://obsidian.md*"
export PIPX_HOME="~/.local/pipx"
export HOMEBREW_BUNDLE_FILE="~/Brewfile"

# Remove "/" from WORDCHARS so that Ctrl+W doesn't kill directory paths.
WORDCHARS="${WORDCHARS//[\/]}"

# Load brew and related completions if it is installed
# Prepend homebrew to path
# Avoid using brew shellenv for setup, because brew completions are messed up
# Handle macos and linux paths for homebrew
{{ if eq .chezmoi.os "darwin" }}
if type /opt/homebrew/bin/brew &> /dev/null; then
  path=("/opt/homebrew/bin" "/opt/homebrew/sbin" $path)
fi
{{ else if eq .chezmoi.os "linux" }}
if type /home/linuxbrew/.linuxbrew/bin/brew &> /dev/null; then
  path=("/home/linuxbrew/.linuxbrew/bin" "/home/linuxbrew/.linuxbrew/sbin" $path)
fi
{{ end }}

eval "$(mise activate zsh)"

# Set these envs after mise has been initialized since neovim may be installed by mise.
# Nvim exists in my home folder in some environments.
# This will find it in my path and get the absolute path.
# The absolute path is required so that sudoedit will be able to
# find the executable, because my personal bin folder does not exist
# in the path of the root user.
NVIM=$(whence -p nvim)

if command -v nvim >/dev/null 2>&1; then
	export EDITOR='nvim'
	export VISUAL='nvim'
  export MANPAGER='nvim +Man!'
	export SUDO_EDITOR=$NVIM
else
	export EDITOR='vim'
	export VISUAL='vim'
	export SUDO_EDITOR='vim'
fi


#======================================================================
# History Configuration
#======================================================================

setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data

## History command wrapper (from Oh My Zsh)
# https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/history.zsh
function omz_history {
  local clear list
  zparseopts -E c=clear l=list

  if [[ -n "$clear" ]]; then
    # if -c provided, clobber the history file
    echo -n >| "$HISTFILE"
    fc -p "$HISTFILE"
    echo >&2 History file deleted.
  elif [[ -n "$list" ]]; then
    # if -l provided, run as if calling `fc' directly
    builtin fc "$@"
  else
    # unless a number is provided, show all history events (starting from 1)
    [[ ${@[-1]-} = *[0-9]* ]] && builtin fc -l "$@" || builtin fc -l "$@" 1
  fi
}

# Timestamp format
case ${HIST_STAMPS-} in
  "mm/dd/yyyy") alias history='omz_history -f' ;;
  "dd.mm.yyyy") alias history='omz_history -E' ;;
  "yyyy-mm-dd") alias history='omz_history -i' ;;
  "") alias history='omz_history' ;;
  *) alias history="omz_history -t '$HIST_STAMPS'" ;;
esac


#======================================================================
# Zsh Options (setopt)
#======================================================================

setopt auto_cd                # change directories without cd
setopt complete_in_word
setopt always_to_end
setopt interactivecomments
setopt multios
setopt prompt_subst
setopt auto_menu
# Extended glob can be problematic with git commands
# Because of HEAD^ etc in commands
setopt extendedglob


#======================================================================
# Completion System Configuration (zstyle)
#======================================================================

# General completion settings
# https://grml.org/zsh/zsh-lovers.html
# Fuzzy matching of completions for when you mistype them:
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
# cd will never select the parent directory (e.g.: cd ../<TAB>):
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*' file-sort modification

# fzf-tab specific styles
zstyle ':completion:*:git-checkout:*' sort false # disable sort when completing `git checkout`
zstyle ':completion:*:descriptions' format '[%d]' # set descriptions format to enable group support
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS} # set list-colors (needs verification)
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'lsd --depth 1 --color always --tree $realpath' # preview directory content
zstyle ':fzf-tab:*' switch-group ',' '.' # switch group using `,` and `.`
# tldr preview example:
# zstyle ':fzf-tab:complete:tldr:argument-1' fzf-preview 'tldr --color always $word'
# systemd unit status preview (Linux only)
zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'
# Git previews
zstyle ':fzf-tab:complete:git-(add|diff|restore):*' fzf-preview \
	'git diff $word | delta'
zstyle ':fzf-tab:complete:git-log:*' fzf-preview \
	'git log --color=always $word'
zstyle ':fzf-tab:complete:git-help:*' fzf-preview \
	'git help $word | bat -plman --color=always'
zstyle ':fzf-tab:complete:git-show:*' fzf-preview \
	'case "$group" in
	"commit tag") git show --color=always $word ;;
	*) git show --color=always $word | delta ;;
	esac'
zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview \
	'case "$group" in
	"modified file") git diff $word | delta ;;
	"recent commit object name") git show --color=always $word | delta ;;
	*) git log --color=always $word ;;
	esac'

# Enable IP addresses in completions (moved from fzf-tab section for clarity)
zstyle ':completion:*' use-ip true


#======================================================================
# Helper Functions & Widgets
#======================================================================

# Rationalise dots for quick directory changes (cd ../<TAB>)
rationalise-dot() {
  if [[ $LBUFFER = *.. ]]; then
    LBUFFER+=/..
  else
    LBUFFER+=.
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot


#======================================================================
# Plugin Sourcing
#======================================================================

# source "$HOME/.asdf/plugins/golang/set-env.zsh" # Example if needed
# command -v direnv &>/dev/null && eval "$(direnv hook zsh)" # Example if needed
# source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc" &>/dev/null
# autoload -Uz zkbd # Load zkbd module (used for keybindings below, if uncommented)

## Plugins (Load before zsh-vi-mode if they don't depend on its bindings)
source ~/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh
# fzf-tab doesn't seem to work for brew completions e.g. kubectl
source ~/zsh/fzf-tab/fzf-tab.plugin.zsh
source ~/zsh/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh


#======================================================================
# FZF Configuration
#======================================================================

# Source fzf keybindings and completions
source <(fzf --zsh)


#======================================================================
# Aliases
#======================================================================

# Load aliases after plugins so that conditional aliases for executables managed
# by asdf can be found and aliased correctly.
source ~/aliases.zsh


#======================================================================
# Environment Variables & Path
#======================================================================

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"


#======================================================================
# Tool Initializations (Starship, Zoxide, Atuin, etc.)
#======================================================================

eval "$(starship init zsh)"
eval "$(zoxide init zsh)"
eval "$(atuin init zsh)"

{{ if eq .chezmoi.os "darwin" }}
# OrbStack (macOS only)
eval "$(orbctl completion zsh)"
eval "$(orb completion zsh)"
{{ end }}


#======================================================================
# Completion System Initialization
#======================================================================

# Add custom completion directory to fpath (if not already added above)
# NOTE: This needs to be before compinit
fpath+=~/.zfunc # This is already added in the Plugin Sourcing section

# Load Homebrew specific completions (if available)
# Needs to be before compinit if they add to fpath or define functions compinit should know
{{ if eq .chezmoi.os "darwin" }}
if type /opt/homebrew/bin/brew &> /dev/null; then
    # google-cloud-sdk path and completions
    # Ensure these are sourced before compinit if they modify fpath or define completion functions
    [ -f "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc" ] && \
      source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
    [ -f "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc" ] && \
      source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
fi
{{ else if eq .chezmoi.os "linux" }}
if type /home/linuxbrew/.linuxbrew/bin/brew &> /dev/null; then
    # Add Linux paths for brew completions if needed
    # Example:
    # [ -f "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc" ] && \
    #   source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
    # [ -f "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc" ] && \
    #   source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
    : # Placeholder if no specific Linux brew completions needed here yet
fi
{{ end }}

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# Initialize the completion system
autoload -Uz compinit && compinit

# Load completions that must run *after* compinit

# Completion for kitty
# https://sw.kovidgoyal.net/kitty/index.html#configuring-kitty
if type kitty &> /dev/null; then
    kitty +complete setup zsh | source /dev/stdin
fi

# Load Homebrew bash completions (if available)
# Requires bashcompinit to be loaded after compinit
if type brew &> /dev/null; then
    # Enable loading bash completions
    autoload -U +X bashcompinit && bashcompinit

    # Load specific bash completions provided by brew packages
    # Example: Terraform completions
    if [ -x "$(brew --prefix)/bin/terraform" ]; then
      complete -o nospace -C "$(brew --prefix)/bin/terraform" terraform
    fi
    # Add other bash completions here if needed
fi


#======================================================================
# Keybindings
#======================================================================

# Unbind problematic bindings
# bindkey -r "^[" # Example: Unbind Alt key if needed

# Alt+c for fzf-cd-widget (Mapped in kitty.conf to send ESC+c)
bindkey '\ec' fzf-cd-widget

# Add a PC-like bind for pipe on macos (Command + <)
# This sequence "^[[60;9u" might be specific to your terminal/setup
bindkey -s "^[[60;9u" "|"

# Example zkbd usage (uncomment and configure if needed)
# source ~/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}
# [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
# [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char


#======================================================================
# Profiling (Optional)
#======================================================================
# zprof # Uncomment this if zmodload zsh/zprof is uncommented at the top
