# Tasks to run with 'chezmoi apply'

[install_neovim_plugins]
    command = "nvim"
    args = ["--headless", "+Lazy! sync", "+MasonUpdate", "+qa"]
    condition = "once"
    stdout = true # Show output during apply
    stderr = true # Show errors during apply
    description = "Install, cleanup and update neovim plugins"

[macos_hush_login]
    os = ["darwin"]
    condition = "once"
    stdout = true
    stderr = true
    description = "Disable 'last login' prompt by creating ~/.hushlogin"
    command = "touch"
    args = ["~/.hushlogin"]

[macos_brew_bundle]
    os = ["darwin"] # Only run on macOS
    condition = "once"
    stdout = true
    stderr = true
    description = "Install/update packages via Brewfile, cleanup, and check health"
    command = """
#!/bin/zsh

echo "Checking for required font (installed via Brewfile)..."
# This check assumes 'font-hack-nerd-font' is in the Brewfile
fc-list | grep "Hack Nerd Font" || echo "Warning: 'Hack Nerd Font' not found. Check Brewfile and brew bundle output."

echo "Installing and updating packages via Brewfile..."
# Use the path to the Brewfile within the source directory
brew bundle --file {{ .chezmoi.sourceDir }}/Brewfile || echo "Warning: brew bundle failed. Check Brewfile path and brew installation."

echo "Cleaning up brew files..."
brew cleanup

echo "Running brew health check..."
brew doctor

echo "Homebrew tasks complete!"
"""

[macos_keyboard_shortcuts]
    os = ["darwin"]
    condition = "once"
    stdout = true
    stderr = true
    description = "Configure macOS keyboard shortcuts for Mission Control"
    command = """
#!/bin/zsh

echo "Configuring macOS keyboard shortcuts..."
# Disable Keyboard -> Shortcuts -> Mission Control -> Move left/right a space.
defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 79 "{enabled = 0; value = { parameters = (65535, 123, 8650752); type = standard;};}" || echo "Failed to disable shortcut 79"
defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 80 "{enabled = 0; value = { parameters = (65535, 123, 8781824); type = standard;};}" || echo "Failed to disable shortcut 80"
defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 81 "{enabled = 0; value = { parameters = (65535, 124, 8650752); type = standard;};}" || echo "Failed to disable shortcut 81"
defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 82 "{enabled = 0; value = { parameters = (65535, 124, 8781824); type = standard;};}" || echo "Failed to disable shortcut 82"

echo "Updating defaults cache..."
# Update in-memory cache
defaults read com.apple.symbolichotkeys.plist > /dev/null || echo "Failed to read symbolichotkeys"

echo "Applying updated settings..."
# Apply updated settings
/System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u || echo "Failed to activate settings"

echo "Keyboard shortcut configuration complete!"
"""

[build_fzf_tab]
    os = ["darwin"] # Only run on macOS
    # Run whenever the source fzf-tab file changes
    condition = ["onchange", "{{ .chezmoi.sourceDir }}/private_dot_config/zsh/fzf-tab/fzf-tab.zsh"]
    stdout = true
    stderr = true
    description = "Build fzf-tab module when its source file changes"
    command = """
#!/bin/zsh

echo "Checking dependencies for fzf-tab build..."
if ! command -v brew &> /dev/null; then
  echo "Error: brew command not found. Cannot check dependencies."
  exit 1
fi
if ! brew list groff &> /dev/null || ! brew list autoconf &> /dev/null; then
  echo "Warning: groff or autoconf not installed via brew. Skipping fzf-tab build. Run 'brew install groff autoconf' or ensure they are in the Brewfile."
  exit 0 # Exit successfully, as this might be expected if dependencies aren't met yet
fi

FZF_TAB_SOURCE="{{ .chezmoi.sourceDir }}/private_dot_config/zsh/fzf-tab/fzf-tab.zsh"
echo "Attempting to build fzf-tab module from $FZF_TAB_SOURCE..."

if [ -f "$FZF_TAB_SOURCE" ]; then
  echo "Sourcing $FZF_TAB_SOURCE and building module..."
  # Ensure ZDOTDIR is not interfering if running outside a normal zsh session
  unset ZDOTDIR
  # Source the script and run the build function in a subshell
  ( source "$FZF_TAB_SOURCE" && build-fzf-tab-module )
  if [ $? -eq 0 ]; then
    echo "fzf-tab module built successfully."
  else
    echo "Warning: Failed to build fzf-tab module."
    # Optionally exit with an error code if build failure should stop chezmoi apply
    # exit 1
  fi
else
  echo "Error: fzf-tab source file not found at $FZF_TAB_SOURCE."
  exit 1 # Exit with error as the file it depends on is missing
fi
"""
