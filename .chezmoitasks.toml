# Tasks to run with 'chezmoi apply'

[setup.once]
    condition = "once"
    stdout = true
    stderr = true
    description = "First time setup for the system"
    command = """
#!/bin/bash
set -euo pipefail

echo "Starting initial setup..."

# Configure git
echo "Configuring git..."
git config --global pull.rebase true
git config --global init.defaultBranch main
git config --global filter.lfs.clean 'git-lfs clean -- %f'
git config --global filter.lfs.smudge 'git-lfs smudge -- %f'
git config --global filter.lfs.process 'git-lfs filter-process'
git config --global filter.lfs.required true
git config --global rebase.autoStash true
git config --global rebase.autosquash true
git config --global core.pager delta
git config --global interactive.diffFilter 'delta --color-only'
git config --global delta.navigate true
git config --global delta.light false
git config --global merge.conflictstyle diff3
git config --global merge.ff only
git config --global diff.colorMoved zebra
git config --global diff.algorithm histogram
git config --global rerere.enabled true
git config --global rerere.autoupdate true
git config --global push.default current
git config --global push.autoSetupRemote true
git config --global color.ui auto
git config --global log.date iso
git config --global help.autocorrect 20

# Install pre-commit hooks
echo "Installing pre-commit hooks..."
(cd "{{ .chezmoi.sourceDir }}" && pre-commit install --install-hooks)

# Install neovim plugins
echo "Installing neovim plugins..."
nvim --headless "+Lazy! sync" "+MasonUpdate" +qa

if [[ "$(uname)" == "Darwin" ]]; then
    echo "Running macOS specific setup..."

    # Hush login
    echo "Disabling 'last login' prompt..."
    touch ~/.hushlogin

    # Keyboard shortcuts
    echo "Configuring macOS keyboard shortcuts..."
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 79 "{enabled = 0; value = { parameters = (65535, 123, 8650752); type = standard;};}" || echo "Failed to disable shortcut 79"
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 80 "{enabled = 0; value = { parameters = (65535, 123, 8781824); type = standard;};}" || echo "Failed to disable shortcut 80"
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 81 "{enabled = 0; value = { parameters = (65535, 124, 8650752); type = standard;};}" || echo "Failed to disable shortcut 81"
    defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 82 "{enabled = 0; value = { parameters = (65535, 124, 8781824); type = standard;};}" || echo "Failed to disable shortcut 82"
    defaults read com.apple.symbolichotkeys.plist > /dev/null || echo "Failed to read symbolichotkeys"
    /System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u || echo "Failed to activate settings"
fi

# Brew setup for both macOS and Linux
echo "Setting up brew..."
if [[ "$(uname)" == "Darwin" ]]; then
    brew bundle --file {{ .chezmoi.sourceDir }}/Brewfile || echo "Warning: brew bundle failed. Check Brewfile path and brew installation."
    brew cleanup
    brew doctor
else
    /home/linuxbrew/.linuxbrew/bin/brew bundle --file {{ .chezmoi.sourceDir }}/Brewfile || echo "Warning: brew bundle failed. Check Brewfile path and brew installation."
    /home/linuxbrew/.linuxbrew/bin/brew cleanup
    /home/linuxbrew/.linuxbrew/bin/brew doctor
fi

echo "Initial setup completed!"
"""

[packages.update]
    condition = ["onchange", "{{ .chezmoi.sourceDir }}/.chezmoidata.toml", "{{ .chezmoi.sourceDir }}/Brewfile"]
    stdout = true
    stderr = true
    description = "Update all packages and tools"
    command = """
#!/bin/bash
set -euo pipefail

echo "üîÑ Starting comprehensive update process..."

# Brew
if [[ "$(uname)" == "Darwin" ]]; then
    echo "üì¶ Updating Homebrew packages..."
    brew update && brew upgrade && brew cleanup
else
    echo "üì¶ Updating Homebrew packages..."
    /home/linuxbrew/.linuxbrew/bin/brew update && /home/linuxbrew/.linuxbrew/bin/brew upgrade && /home/linuxbrew/.linuxbrew/bin/brew cleanup
fi

# mise
if command -v mise >/dev/null 2>&1; then
    echo "üõ†Ô∏è  Updating mise and tool versions..."
    mise upgrade
else
    echo "‚ö†Ô∏è  mise not found, skipping tool updates"
fi

# Neovim
if command -v nvim >/dev/null 2>&1; then
    echo "‚öôÔ∏è  Updating Neovim plugins and LSP tools..."
nvim --headless "+Lazy! sync" "+lua require('lazy').load({plugins={'mason.nvim'}})" "+MasonUpdate" +qa
else
    echo "‚ö†Ô∏è  Neovim not found, skipping plugin updates"
fi

# pipx
if command -v pipx >/dev/null 2>&1; then
    echo "üêç Installing and updating Python tools via pipx..."
    {{- range .packages.pipx.tools }}
    if ! pipx list --short | grep -q "^{{ . }} "; then
        echo "üì¶ Installing {{ . }}..."
        pipx install {{ . }}
    else
        echo "‚úÖ {{ . }} already installed"
    fi
    {{- end }}
    echo "‚¨ÜÔ∏è  Upgrading all pipx packages..."
pipx upgrade-all
else
    echo "‚ö†Ô∏è  pipx not found, skipping Python package updates"
fi

echo "‚úÖ Update process completed successfully!"
"""

[completions.generate]
    condition = ["onchange", "{{ .chezmoi.sourceDir }}/.chezmoidata.toml"]
    stdout = true
    stderr = true
    description = "Generate ZSH completions for various CLI tools"
    command = """
#!/bin/bash
set -euo pipefail

COMP_DIR="$HOME/.zfunc"
mkdir -p "${COMP_DIR}"

echo "üîß Generating ZSH completions in ${COMP_DIR}..."
generated=0
skipped=0

{{- range $tool, $cmd := .packages.completion_tools.zsh_completions }}
if command -v {{ $tool }} >/dev/null 2>&1; then
    echo "üìù Generating completion for {{ $tool }}..."
    {{ $cmd }} > "${COMP_DIR}/_{{ $tool }}" 2>/dev/null || echo "‚ö†Ô∏è  Failed to generate {{ $tool }} completion"
    if [[ -f "${COMP_DIR}/_{{ $tool }}" ]]; then
        ((generated++))
    fi
else
    echo "‚è≠Ô∏è  {{ $tool }} not found, skipping completion"
    ((skipped++))
fi
{{- end }}

echo "‚úÖ ZSH completions generation completed!"
echo "üìä Generated: ${generated}, Skipped: ${skipped}"
echo "üìÅ Completions saved in: ${COMP_DIR}"
"""

[shell.display_colors]
    condition = "always"
    stdout = true
    stderr = true
    description = "Display terminal colors"
    command = """
#!/bin/sh
awk -v term_cols="${width:-$(tput cols)}" 'BEGIN{
    s="  ";
    for (colnum = 0; colnum<term_cols; colnum++) {
        r = 255-(colnum*255/term_cols);
        g = (colnum*510/term_cols);
        b = (colnum*255/term_cols);
        if (g>255) g = 510-g;
        printf "\\033[48;2;%d;%d;%dm", r,g,b;
        printf "\\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
        printf "%s\\033[0m", substr(s,colnum%2+1,1);
    }
    printf "\\033[1mbold\\033[0m\n";
    printf "\\033[3mitalic\\033[0m\n";
    printf "\\033[3m\\033[1mbold italic\\033[0m\n";
    printf "\\033[4munderline\\033[0m\n";
    printf "\\033[9mstrikethrough\\033[0m\n";
    printf "\\033[31mred text\\033[0m\n";
}'
"""

[zsh.build_fzf_tab]
    os = ["darwin"] # Only run on macOS
    condition = ["onchange", "{{ .chezmoi.sourceDir }}/private_dot_config/zsh/fzf-tab/fzf-tab.zsh"]
    stdout = true
    stderr = true
    description = "Build fzf-tab module when its source file changes"
    command = """
#!/bin/zsh

echo "Checking dependencies for fzf-tab build..."
if ! command -v brew &> /dev/null; then
  echo "Error: brew command not found. Cannot check dependencies."
  exit 1
fi
if ! brew list groff &> /dev/null || ! brew list autoconf &> /dev/null; then
  echo "Warning: groff or autoconf not installed via brew. Skipping fzf-tab build. Run 'brew install groff autoconf' or ensure they are in the Brewfile."
  exit 0 # Exit successfully, as this might be expected if dependencies aren't met yet
fi

FZF_TAB_SOURCE="{{ .chezmoi.sourceDir }}/private_dot_config/zsh/fzf-tab/fzf-tab.zsh"
echo "Attempting to build fzf-tab module from $FZF_TAB_SOURCE..."

if [ -f "$FZF_TAB_SOURCE" ]; then
  echo "Sourcing $FZF_TAB_SOURCE and building module..."
  # Ensure ZDOTDIR is not interfering if running outside a normal zsh session
  unset ZDOTDIR
  # Source the script and run the build function in a subshell
  ( source "$FZF_TAB_SOURCE" && build-fzf-tab-module )
  if [ $? -eq 0 ]; then
    echo "fzf-tab module built successfully."
  else
    echo "Warning: Failed to build fzf-tab module."
    # Optionally exit with an error code if build failure should stop chezmoi apply
    # exit 1
  fi
else
  echo "Error: fzf-tab source file not found at $FZF_TAB_SOURCE."
  exit 1 # Exit with error as the file it depends on is missing
fi
"""

[update_ai_tools]
    condition = "always"
    stdout = true
    stderr = true
    description = "Update all AI tools"
    command = """
#!/bin/sh
pipx install "vectorcode[mcp,cli]"
npm i -g @anthropic-ai/claude-code
npm install -g @google/gemini-cli
pipx install git+https://github.com/arben-adm/mcp-sequential-thinking
pipx inject sequential-thinking portalocker
pipx install git+https://github.com/BeehiveInnovations/zen-mcp-server
go install github.com/github/github-mcp-server/cmd/github-mcp-server@latest
claude mcp add --scope=user --transport=sse graphiti-memory -- http://localhost:8000/sse
claude mcp add kicad -- ~/repos/kicad-mcp/.venv/bin/python ~/repos/kicad-mcp/main.py
claude mcp add --scope=user vectorcode -- vectorcode-mcp-server
claude mcp add --scope user zen-mcp-server -- uvx --from git+https://github.com/BeehiveInnovations/zen-mcp-server.git zen-mcp-server
claude mcp add --scope user playwright -- npx -y "@playwright/mcp@latest"
claude mcp add context7 -- npx -y @upstash/context7-mcp
claude mcp add github -- github-mcp-server stdio
claude mcp add --scope=user lsp-typescript -- npx -y tritlo/lsp-mcp typescript ~/.local/share/nvim/mason/bin/typescript-language-server --stdio
claude mcp add --scope=user lsp-clangd -- npx -y tritlo/lsp-mcp clangd ~/.local/share/nvim/mason/bin/clangd --stdio
claude mcp add --scope=user lsp-basedpyright-langserver -- npx -y tritlo/lsp-mcp basedpyright-langserver ~/.local/share/nvim/mason/bin/basedpyright-langserver --stdio
claude mcp add --scope=user podio-mcp -- npx https://github.com/ForumViriumHelsinki/podio-mcp
claude mcp add --scope=user lsp-github-actions -- npx -y tritlo/lsp-mcp github-actions ~/.local/share/nvim/mason/bin/gh-actions-language-server --stdio
claude mcp add --scope=user lsp-terraform -- npx -y tritlo/lsp-mcp terraform ~/.local/share/nvim/mason/bin/terraform-ls --stdio
claude mcp add --scope=user lsp-rust -- npx -y tritlo/lsp-mcp rust ~/.local/share/nvim/mason/bin/rust-analyzer --stdio
claude mcp add --scope=user lsp-lua -- npx -y tritlo/lsp-mcp lua ~/.local/share/nvim/mason/bin/lua-language-server --stdio
claude mcp add --scope=user lsp-yaml -- npx -y tritlo/lsp-mcp yaml ~/.local/share/nvim/mason/bin/yaml-language-server --stdio
claude mcp add --scope=user lsp-docker -- npx -y tritlo/lsp-mcp dockerfile ~/.local/share/nvim/mason/bin/docker-langserver --stdio
claude mcp add --scope=user lsp-json -- npx -y tritlo/lsp-mcp json ~/.local/share/nvim/mason/bin/vscode-json-language-server --stdio
claude mcp add --scope=user lsp-bash -- npx -y tritlo/lsp-mcp bash ~/.local/share/nvim/mason/bin/bash-language-server --stdio
claude mcp add --scope=user lsp-helm -- npx -y tritlo/lsp-mcp helm ~/.local/share/nvim/mason/bin/helm_ls --stdio
claude mcp add --scope=user --transport=http sentry https://mcp.sentry.dev/mcp
"""
